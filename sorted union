// sorted union refactored 

function uniteUnique(arr1, arr2, arr3) {
  // Creates an empty array to store our final result.
  var finalArray = arr1;

  // Loop through the arguments object to truly made the program work with two or more arrays
  // instead of 3.
  for (var i = 0; i < arguments.length; i++) {
    for (var j = 0; j < arguments[i].length; j++){
      if (finalArray.indexOf(arguments[i][j])=== -1) {
        finalArray.push(arguments[i][j];
      }
    }
  }
  arr1 = finalArray
  return finalArray;
}

// test here
uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);
